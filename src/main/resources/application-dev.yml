spring:
    config:
        activate:
            on-profile: dev
    datasource:
        url: jdbc:postgresql://db:5432/logi_graph_db
        username: postgres
        password: 123
    kafka:
        bootstrap-servers: kafka:9092
        consumer:
            group-id: logi-graph-group
            auto-offset-reset: earliest
            key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
            value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
            properties:
                spring.json.trusted.packages: 'com.learning.logi.graph.api.domain.*'
                spring.json.value.default.type: com.learning.logi.graph.api.domain.driver.dto.LocationUpdateEvent
        producer:
            key-serializer: org.apache.kafka.common.serialization.StringSerializer
            value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    flyway:
        locations:
            - classpath:db/migrations
    neo4j:
        uri: bolt://neo4j:7687
        migrations:
            locations-to-scan:
                - neo4j/migrations
            validate-on-startup: true
            autoclose-connection: true
        authentication:
            username: neo4j
            password: password
    data:
        redis:
            host: redis
            ports: 6379
    jpa:
        hibernate:
            ddl-auto: validate
        properties:
            hibernate:
                format_sql: true
                dialect: org.hibernate.dialect.PostgreSQLDialect
                temp_use_jdbc_metadata_defaults: false
    elasticsearch:
        uris: http://elasticsearch:9200
        connection-timeout: 1s
        socket-timeout: 30s
timefold:
    solver:
        termination:
            spent-limit: 30s