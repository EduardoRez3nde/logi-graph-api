services:
  app:
    build: .
    container_name: logi-graph
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/logi_graph_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123
    depends_on:
      db:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - backend
  db:
    image: postgis/postgis:16-3.4
    container_name: postgis_db
    restart: always
    environment:
      POSTGRES_DB: logi_graph_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d logi_graph_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
  neo4j:
    image: neo4j:5.26-community
    container_name: neo4j
    restart: unless-stopped
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_ACCEPT_LICENSE_AGREEMENT: yes
      NEO4J_AUTH: neo4j/password
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_allowlist: 'apoc.*,gds.*'
    volumes:
      - neo4j_data:/data
      - ./import:/import
    healthcheck:
      test: [ "CMD-SHELL", "wget --quiet --tries=1 --spider --header 'Authorization: Basic bmVvNGo6cGFzc3dvcmQ=' http://localhost:7474 || exit 1" ]
      interval: 20s
      timeout: 10s
      retries: 10
    networks:
      - backend
  redis:
    image: redis:8.2
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
volumes:
  pg_data:
  neo4j_data:
  redis_data:
networks:
  backend: